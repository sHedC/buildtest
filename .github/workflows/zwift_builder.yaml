name: Build Test

on:
  push:
    branches:
      - 'main'

permissions: write-all
concurrency: zwift

jobs:
  prepare:
    name: Check If Build Is Needed
    runs-on: ubuntu-latest
    outputs:
      last_tag: ${{ steps.latest_tag.outputs.value }}
      should_build: ${{ steps.check_commit.outputs.build }}
      build_type: ${{ steps.check_commit.outputs.build_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git tag --sort v:creatordate | grep v | tail -1)
          echo "value=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Get Changes
        if: steps.latest_tag.outputs.value != ''
        id: changes
        uses: tj-actions/changed-files@v44
        with:
          base_sha: HEAD
          sha: ${{steps.latest_tag.outputs.value}}
          files_yaml: |
            full:
              - buildAll.txt
            part:
              - buildPartial.txt

      - name: Check Build Type
        id: check_commit
        run: |
          BUILD_TYPE='None'
          SHOULD_BUILD='false'

          if [[ ${{steps.latest_tag.outputs.value}} == '' ]]; then
            BUILD_TYPE='Rebuild'
            SHOULD_BUILD='true'
          elif [[ ${{steps.changes.outputs.full_any_changed}} == 'true' ]]; then
            BUILD_TYPE='Rebuild'
            SHOULD_BUILD='true'
          elif [[ ${{steps.changes.outputs.part_any_changed}} == 'true' ]]; then
            BUILD_TYPE='Incremental'
            SHOULD_BUILD='true'
          fi

          echo "build_type=$BUILD_TYPE" >> $GITHUB_OUTPUT
          echo "build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

  release:
    name: Create GitHub Release
    needs: prepare
    if: needs.prepare.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tag name
        id: tag
        run: |
          tag=v$(date +%Y-%m-%d.%H%M%S)
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: |
          last_tag="${{ needs.prepare.outputs.last_tag }}"
          tag="${{ steps.tag.outputs.tag }}"
          type="${{ needs.prepare.outputs.build_type }}"
          gh release create --draft "$tag" --title "$type" --generate-notes --notes-start-tag $last_tag

  full_build:
    name: Docker
    needs: [prepare, release]
    if: needs.prepare.outputs.build_type == 'Rebuild'
    uses: ./.github/workflows/zwift_full_build.yaml

  part_build:
    name: Docker
    needs: [prepare, release]
    if: needs.prepare.outputs.build_type == 'Incremental'
    uses: ./.github/workflows/zwift_part_build.yaml

  publish:
    name: Publish Release
    needs: [release, full_build, part_build]
    if: |
      always() &&
      (needs.part_build.outputs.success == 'true' || needs.full_build.outputs.success == 'true')
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: gh release edit "${{ needs.release.outputs.tag }}" --draft=false

  cleanup:
    name: Cleanup On Fail
    needs: [release, full_build, part_build]
    if: |
      always() &&
      contains(needs.*.result, 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Delete Draft
        env:
          GH_TOKEN: ${{ github.token }}
          GH_REPO: ${{ github.repository }}
        run: gh release delete "${{ needs.release.outputs.tag }}" -y
